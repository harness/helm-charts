global:
  airgap: "false"
  ha: false

  # -- Private Docker Image registry, will override all registries defined in subcharts
  imageRegistry: ""

  loadbalancerURL: https://myhostname.foo.bar
  mongoSSL: false
  storageClassName: ""

  sto:
    enabled: false

  # -- Enabled will deploy SRM to your cluster
  srm:
    enabled: false

  # -- Enabled will deploy NG Customer Dashboards
  ngcustomdashboard:
    enabled: false

  # -- Enabled will deploy Feature Flags Component
  ff:
    enabled: false

  ## Do not have ingress enabled and istio enabled at the same time.
  # --- Enabling ingress create kubernetes Ingress Objects for nginx.
  ingress:
    enabled: false
    createNginxIngressController: false
    createDefaultBackend: false
    loadBalancerIP: '0.0.0.0'
    loadBalancerEnabled: false
    className: "harness"
    useSelfSignedCert: false
    hosts:
      - 'myhost.example.com'
    tls:
      enabled: true
      secretName: mycert

harness:
  ci:
    # -- Enabled will deploy CI to your cluster
    enabled: true

    ci-manager:
      affinity: {}
      nodeSelector: {}
      tolerations: []

  platform:
    # -- Access control settings (taints, tolerations, etc)
    access-control:
      affinity: {}
      nodeSelector: {}
      tolerations: []

    # -- change-data-capture settings (taints, tolerations, etc)
    change-data-capture:
      affinity: {}
      nodeSelector: {}
      tolerations: []

    # -- cv-nextgen settings (taints, tolerations, etc)
    cv-nextgen:
      affinity: {}
      nodeSelector: {}
      tolerations: []

    # -- delegate proxy settings (taints, tolerations, etc)
    delegate-proxy:
      affinity: {}
      nodeSelector: {}
      tolerations: []

    # -- gateway settings (taints, tolerations, etc)
    gateway:
      affinity: {}
      nodeSelector: {}
      tolerations: []

    # -- harness-manager (taints, tolerations, etc)
    harness-manager:
      affinity: {}
      nodeSelector: {}
      tolerations: []

    # -- le-nextgen (taints, tolerations, etc)
    le-nextgen:
      affinity: {}
      nodeSelector: {}
      tolerations: []

    # -- log-service (taints, tolerations, etc)
    log-service:
      affinity: {}
      nodeSelector: {}
      tolerations: []

    # -- minio (taints, tolerations, etc )
    minio:
      affinity: {}
      nodeSelector: {}
      tolerations: []

    mongodb:
      affinity: {}
      nodeSelector: {}
      tolerations: []

    next-gen-ui:
      affinity: {}
      nodeSelector: {}
      tolerations: []

    ng-auth-ui:
      affinity: {}
      nodeSelector: {}
      tolerations: []

    ng-manager:
      affinity: {}
      nodeSelector: {}
      tolerations: []

    pipeline-service:
      affinity: {}
      nodeSelector: {}
      tolerations: []

    platform-service:
      affinity: {}
      nodeSelector: {}
      tolerations: []

    redis:
      affinity: {}
      nodeSelector: {}
      tolerations: []

    scm-service:
      affinity: {}
      nodeSelector: {}
      tolerations: []

    template-service:
      affinity: {}
      nodeSelector: {}
      tolerations: []

    ti-service:
      affinity: {}
      nodeSelector: {}
      tolerations: []

    timescaledb:
      affinity: {}
      nodeSelector: {}
      tolerations: []

  sto:
    # -- Enabled will deploy STO to your cluster
    enabled: true

    sto-core:
      affinity: {}
      nodeSelector: {}
      tolerations: []

    sto-manager:
      affinity: {}
      nodeSelector: {}
      tolerations: []

  srm:
    # -- Enabled will deploy SRM to your cluster
    enabled: false
    enable-receivers: false

    et-service:
      affinity: {}
      nodeSelector: {}
      tolerations: []

    et-collector:
      affinity: {}
      nodeSelector: {}
      tolerations: []

  ngcustomdashboard:
    looker:
      affinity: {}
      nodeSelector: {}
      tolerations: []
    ng-custom-dashboard:
      affinity: {}
      nodeSelector: {}
      tolerations: []

istio:
  enabled: true
  gateway:
    create: true
    port: 443
    protocol: HTTPS
  hosts:
    - '*'
  tls:
    credentialName: mycert
    minProtocolVersion: TLSV1_2
    mode: SIMPLE
  virtualService:
    hosts:
      - "myhostname.foo.bar"
