global:
  airgap: "false"
  ha: true

  # -- This private Docker image registry will override any registries that are defined in subcharts.
  imageRegistry: ""

  loadbalancerURL: https://myhostname.example.com
  mongoSSL: false
  storageClassName: ""

  cd:
    enabled: false
  # -- Enable to install CI
  ci:
    enabled: false
  # -- Enable to install STO
  sto:
    enabled: false
  # -- Enable to install SRM
  srm:
    enabled: false
  # -- Enable to install FF
  ff:
    enabled: false
  # -- Enable to install CDB
  ngcustomdashboard:
    enabled: false
  # -- Enable to install CCM(beta)
  ccm:
    enabled: false
  # -- Enable to install gitops(beta)
  gitops:
    enabled: false
  # -- Enable to install opa(beta)
  opa:
    enabled: false
  # --  Enabled will not send invites to email and autoaccepts
  saml:
    autoaccept: false
  cg:
    enabled: false

  ## !! Enable Istio or ingress; do not enable both. If `istio.enabled` is true, `ingress.enabled` must not be.
  # --- Set `ingress.enabled` to `true` to create Kubernetes *Ingress* objects for Nginx.
  ingress:
    enabled: true
    loadBalancerIP: '0.0.0.0'
    loadBalancerEnabled: false
    className: "harness"
    hosts:
      - 'myhost.example.com'
    tls:
      enabled: true
      secretName: harness-cert

    nginx:
      # -- Create Nginx Controller.  True will deploy a controller into your cluster
      create: false
      controller:
        # -- annotations to be addded to ingress Controller
        annotations: {}
      objects:
        # -- annotations to be added to ingress Objects
        annotations: {}

    defaultbackend:
      # -- Create will deploy a default backend into your cluster
      create: false

  # -- Istio Ingress Settings
  istio:
    enabled: false
    strict: false
    gateway:
      create: true
      port: 443
      protocol: HTTPS
    hosts:
      - '*'
    tls:
      credentialName: harness-cert
      minProtocolVersion: TLSV1_2
      mode: SIMPLE
    virtualService:
      hosts:
        - "myhostname.example.com"

ci:
  ci-manager:
    affinity: {}
    nodeSelector: {}
    tolerations: []

sto:
  sto-core:
    affinity: {}
    nodeSelector: {}
    tolerations: []
    autoscaling:
      enabled: false

  sto-manager:
    affinity: {}
    nodeSelector: {}
    tolerations: []
    autoscaling:
      enabled: false

srm:
  enable-receivers: false

  et-service:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  et-collector:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  et-receiver-decompile:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  et-receiver-hit:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  et-receiver-sql:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  et-receiver-agent:
    affinity: {}
    nodeSelector: {}
    tolerations: []

ngcustomdashboard:
  looker:
    affinity: {}
    nodeSelector: {}
    tolerations: []
  ng-custom-dashboards:
    affinity: {}
    nodeSelector: {}
    tolerations: []

platform:
  # -- Access control settings (taints, tolerations, and so on)
  access-control:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- change-data-capture settings (taints, tolerations, and so on)
  change-data-capture:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- cv-nextgen settings (taints, tolerations, and so on)
  cv-nextgen:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- delegate proxy settings (taints, tolerations, and so on)
  delegate-proxy:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- gateway settings (taints, tolerations, and so on)
  gateway:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- harness-manager (taints, tolerations, and so on)
  harness-manager:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- le-nextgen (taints, tolerations, and so on)
  le-nextgen:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- log-service (taints, tolerations, and so on)
  log-service:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- minio (taints, tolerations, and so on)
  minio:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  mongodb:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  next-gen-ui:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  ng-auth-ui:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  ng-manager:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  pipeline-service:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  platform-service:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  redis:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  scm-service:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  template-service:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  ti-service:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  timescaledb:
    affinity: {}
    nodeSelector: {}
    tolerations: []
