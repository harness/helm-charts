global:
  # -- Airgap functionality. Disabled by default
  airgap: "false"
  # -- High availability: deploy 3 mongodb pods instead of 1. Not recommended for evaluation or POV
  ha: true
  # -- This private Docker image registry will override any registries that are defined in subcharts.
  imageRegistry: ""
  # -- Provide your URL for your intended load balancer
  loadbalancerURL: https://myhostname.example.com
  # -- provide overrides to use in-cluster database or configure to use external databases
  database:
    # -- settings to deploy mongo in-cluster or configure to use external mongo source
    mongo:
      # -- set false to configure external mongo and generate mongo uri protocol://hosts?extraArgs
      installed: true
      # -- set the protocol for mongo uri
      protocol: mongodb
      # --   set the mongo hosts if mongo.installed is set to false
      hosts: []
      # -- provide the secretname to reference mongo username and password
      secretName: ""
      # -- provide the userKey to reference mongo username
      userKey: ""
      # -- provide the passwordKey to reference mongo password
      passwordKey: ""
      # -- set additional arguments to mongo uri
      extraArgs: ""

  # -- Enable SSL for MongoDB service
  mongoSSL: false
  # -- Configure storage class for Harness
  storageClassName: ""
  # -- Configure storage class for Mongo,Timescale,Redis
  storageClass: ""
  # -- Enable to deploy postgres(needed for NG components)
  postgres:
    enabled: true
  # -- Enable stack driver logging
  stackDriverLoggingEnabled: false
  # -- Enable to install First Generation Harness Platform (disabled by default)
  cg:
    enabled: false
  # -- Enable to install NG (Next Generation Harness Platform)
  ng:
    enabled: true
  # -- Enable to install Continuous Deployment (CD)
  cd:
    enabled: false
  # -- Enable to install Continuous Integration (CI)
  ci:
    enabled: false
  # -- Enable to install Security Test Orchestration (STO)
  sto:
    enabled: false
  # -- Enable to install Site Reliability Management (SRM)
  srm:
    enabled: false
  # -- Enable to install Feature Flags (FF)
  ff:
    enabled: false
  # -- Enable to install Next Generation Custom Dashboards (Beta)
  ngcustomdashboard:
    enabled: false
  # -- Enable to install Cloud Cost Management (CCM) (Beta)
  ccm:
    enabled: false
  # -- Enable to install gitops
  gitops:
    enabled: false
  # -- Enable to install Open Policy Agent (OPA)
  opa:
    enabled: false
  # -- Enable to install Chaos Engineering (CE) (Beta)
  chaos:
    enabled: false
  migrator:
    enabled: false
  # --  SAML auto acceptance. Enabled will not send invites to email and autoaccepts
  saml:
    autoaccept: false
  # -- Place the license key, Harness support team will provide these
  license:
    cg: ''
    ng: ''
  # -- Enable to install Next Generation Git Sync functionality
  ngGitSync:
    enabled: false
  # -- Utilize immutable delegates (default = true)
  useImmutableDelegate: "true"
  # -- Use delegate minimal image (default = false)
  useMinimalDelegateImage: false
  # -- Method to create a secret for your SMTP server
  smtpCreateSecret:
    enabled: false
  # -- Enable monitoring for all harness services: disabled by default
  monitoring:
    enabled: false
    port: 8889
    path: /metrics

  ## !! Enable Istio or ingress; do not enable both. If `istio.enabled` is true, `ingress.enabled` must not be.
  # --- Set `ingress.enabled` to `true` to create Kubernetes *Ingress* objects for Nginx.
  ingress:
    enabled: false
    loadBalancerIP: '0.0.0.0'
    loadBalancerEnabled: false
    className: "harness"
    hosts:
      - 'myhost.example.com'
    tls:
      enabled: true
      secretName: harness-cert

    # -- Section to provide configuration on an NGINX ingress controller.
    nginx:
      # -- Create Nginx Controller.  True will deploy a controller into your cluster
      create: false
      controller:
        # -- annotations to be addded to ingress Controller
        annotations: {}
      objects:
        # -- annotations to be added to ingress Objects
        annotations: {}
      image:
        registry:  us.gcr.io
        repository: k8s-artifacts-prod/ingress-nginx/controller
        pullPolicy: IfNotPresent
        # Overrides the image tag whose default is the chart appVersion.
        tag: "v1.0.0-alpha.2"
        digest: ""

    defaultbackend:
      # -- Create will deploy a default backend into your cluster
      create: false
      image:
        registry: registry.k8s.io
        repository: defaultbackend-amd64
        pullPolicy: IfNotPresent
        # Overrides the image tag whose default is the chart appVersion.
        tag: "1.5"
        digest: ""

  # -- Istio Ingress Settings
  istio:
    enabled: false
    strict: false
    gateway:
      create: true
      port: 443
      # -- override the name of gateway
      name: ""
      # -- override the name of namespace to deploy gateway
      namespace: ""
      # -- adds a gateway selector
      selector:
        istio: ingressgateway
      protocol: HTTPS
    hosts:
      - '*'
    tls:
      credentialName: harness-cert
      minProtocolVersion: TLSV1_2
      mode: SIMPLE
    virtualService:
      hosts:
        - "myhostname.example.com"

# -- Install the Continuous Integration (CI) manager pod
ci:
  ci-manager:
    affinity: {}
    nodeSelector: {}
    tolerations: []

# -- Config for Security Test Orchestration (STO)
sto:
  # -- Install the STO core
  sto-core:
    affinity: {}
    nodeSelector: {}
    tolerations: []
    autoscaling:
      enabled: false
  # -- Install the STO manager
  sto-manager:
    affinity: {}
    nodeSelector: {}
    tolerations: []
    autoscaling:
      enabled: false
# -- overrides for Postgresql
infra:
  postgresql:
  # -- set enable to enable postgres metrics exporter
    metrics:
        enabled: false
    # podAnnotations:
    #   prometheus.io/path: /metrics
    #   prometheus.io/port: '9187'
    #   prometheus.io/scrape: 'false'
    auth:
      existingSecret: "postgres"

# -- Config for Site Reliability Management (SRM)
srm:
  # -- Flag to enable error-tracking (ET) receivers
  enable-receivers: false

  # -- Install the error-tracking (ET) service
  et-service:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- Install the error-tracking (ET) collector
  et-collector:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- Install the error-tracking (ET) receiver decompiler
  et-receiver-decompile:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- Install the error-tracking (ET) receiver hit
  et-receiver-hit:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- Install the error-tracking (ET) receiver sql service
  et-receiver-sql:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- Install the error-tracking (ET) receiver agent
  et-receiver-agent:
    affinity: {}
    nodeSelector: {}
    tolerations: []

# -- Install the Next Generation customer dashboard
ngcustomdashboard:
  # -- Install the looker service
  looker:
    affinity: {}
    nodeSelector: {}
    tolerations: []
  # -- Install the Next Generation customer dashboards service
  ng-custom-dashboards:
    affinity: {}
    nodeSelector: {}
    tolerations: []

# -- Config for platform-level services (always deployed by default to support all services)
platform:
  # -- Access control settings (taints, tolerations, and so on)
  access-control:
    # -- set mongoHosts for external database hosts
    # -- mongoHosts:
    # -- - replica1.host.com:27017
    # -- - replica2.host.com:27017
    # -- - replica3.host.com:27017
    mongoHosts: []
    # -- enable mongoSSL for external database connections
    mongoSSL:
      enabled: false
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- change-data-capture settings (taints, tolerations, and so on)
  change-data-capture:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- cv-nextgen settings (taints, tolerations, and so on)
  cv-nextgen:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- delegate proxy settings (taints, tolerations, and so on)
  delegate-proxy:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- gateway settings (taints, tolerations, and so on)
  gateway:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- harness-manager (taints, tolerations, and so on)
  harness-manager:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- deploy harness-secret( set false to not deploy any secrets)
  harness-secrets:
    enabled: true

   # -- learning-engine (taints, tolerations, and so on)
  learning-engine:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- le-nextgen (taints, tolerations, and so on)
  le-nextgen:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- log-service (taints, tolerations, and so on)
  log-service:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- migrator (taints, tolerations, and so on)
  migrator:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- minio (taints, tolerations, and so on)
  minio:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- mongodb (taints, tolerations, and so on)
  mongodb:
    metrics:
    # -- set enable to enable mongo metrics exporter
        enabled: false
    # podAnnotations:
    #   prometheus.io/path: /metrics
    #   prometheus.io/port: '9216'
    #   prometheus.io/scrape: 'false'
    affinity: {}
    nodeSelector: {}
    tolerations: []
    arbiter:
      affinity: {}
      nodeSelector: {}
      tolerations: []

  # -- next-gen-ui (Next Generation User Interface) (taints, tolerations, and so on)
  next-gen-ui:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- ng-auth-ui (Next Generation Authorization User Interface) (taints, tolerations, and so on)
  ng-auth-ui:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- ng-manager (Next Generation Manager) (taints, tolerations, and so on)
  ng-manager:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- pipeline-service (Harness pipeline-related services) (taints, tolerations, and so on)
  pipeline-service:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- platform-service (Harness platform-related services) (taints, tolerations, and so on)
  platform-service:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- redis (taints, tolerations, and so on)
  redis:
  # -- set enable to enable redis exporter
    metrics:
      enabled: false
    # podAnnotations:
    #   prometheus.io/path: /metrics
    #   prometheus.io/port: '9121'
    #   prometheus.io/scrape: 'false'
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- scm-service (taints, tolerations, and so on)
  scm-service:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- template-service (Harness template-related services) (taints, tolerations, and so on)
  template-service:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- ti-service (Harness Test Intelligence-related services) (taints, tolerations, and so on)
  ti-service:
    affinity: {}
    nodeSelector: {}
    tolerations: []

  # -- timescaledb (Timescale Database service) (taints, tolerations, and so on)
  timescaledb:
  # -- set enable to enable timescaledb metric exporter
    prometheus:
        enabled: false
    # podAnnotations:
    #   prometheus.io/path: /metrics
    #   prometheus.io/port: '9187'
    #   prometheus.io/scrape: 'false'
    affinity: {}
    nodeSelector: {}
    tolerations: []
  # -- ui (Harness First CG Ui component) (taints, tolerations, and so on)
  ui:
    affinity: {}
    nodeSelector: {}
    tolerations: []
  # -- verificiation-service (Harness First CG verification service) (taints, tolerations, and so on)
  verification-svc:
    affinity: {}
    nodeSelector: {}
    tolerations: []


# -- Enable the Cloud Cost Management (CCM) service
ccm:
  # -- Set ccm.clickhouse.enabled to true for AWS infrastructure
  clickhouse:
    enabled: false
  # -- Set ccm.event-service.stackDriverLoggingEnabled to true for GCP infrastructure
  event-service:
    stackDriverLoggingEnabled: false
  # -- Set ccm.batch-processing.clickhouse.enabled to true for AWS infrastructure
  batch-processing:
    # -- Set ccm.batch-processing.stackDriverLoggingEnabled to true for GCP infrastructure
    stackDriverLoggingEnabled: false
    cloudProviderConfig:
      CLUSTER_DATA_GCS_BACKUP_BUCKET: "placeHolder"
      CLUSTER_DATA_GCS_BUCKET: "placeHolder"
      DATA_PIPELINE_CONFIG_GCS_BASE_PATH: "placeHolder"
      GCP_PROJECT_ID: "placeHolder"
      S3_SYNC_CONFIG_BUCKET_NAME: "placeHolder"
      S3_SYNC_CONFIG_REGION: "placeHolder"
    # -- Set ccm.clickhouse.enabled to true for AWS infrastructure
    clickhouse:
      enabled: false
    # -- Set ccm.batch-processing.awsAccountTagsCollectionJobConfig.enabled to false for AWS infrastructure
    awsAccountTagsCollectionJobConfig:
      enabled: true
  # -- Set ccm.nextgen-ce.clickhouse.enabled to true for AWS infrastructure
  nextgen-ce:
    # -- Set ccm.nextgen-ce.stackDriverLoggingEnabled to true for GCP infrastructure
    stackDriverLoggingEnabled: false
    cloudProviderConfig:
      GCP_PROJECT_ID: "placeHolder"
    # -- Set ccm.clickhouse.enabled to true for AWS infrastructure
    clickhouse:
      enabled: false

# -- Enable the Cloud Cost Management (CCM) service for the Next Generation Manager
ng-manager:
  ceGcpSetupConfigGcpProjectId: "placeHolder"

chaos:
  chaos-manager:
    nodeSelector: {}
    tolerations: []

  chaos-driver:
    nodeSelector: {}
    tolerations: []

  chaos-web:
    nodeSelector: {}
    tolerations: []
