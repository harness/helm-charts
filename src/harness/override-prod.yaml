## Global Settings
# -- Set ccm.clickhouse.enabled to true for AWS infrastructure
# -- Set ccm.batch-processing.clickhouse.enabled to true for AWS infrastructure
# -- Set ccm.nextgen-ce.clickhouse.enabled to true for AWS infrastructure
# -- Set ccm.batch-processing.awsAccountTagsCollectionJobConfig.enabled to false for AWS infrastructure
# -- Set ccm.event-service.stackDriverLoggingEnabled to true for GCP infrastructure
# -- Set ccm.batch-processing.stackDriverLoggingEnabled to true for GCP infrastructure
# -- Set ccm.nextgen-ce.stackDriverLoggingEnabled to true for GCP infrastructure
ccm:
  batch-processing:
    awsAccountTagsCollectionJobConfig:
      enabled: true
    cloudProviderConfig:
      CLUSTER_DATA_GCS_BACKUP_BUCKET: "placeHolder"
      CLUSTER_DATA_GCS_BUCKET: "placeHolder"
      DATA_PIPELINE_CONFIG_GCS_BASE_PATH: "placeHolder"
      GCP_PROJECT_ID: "placeHolder"
      S3_SYNC_CONFIG_BUCKET_NAME: "placeHolder"
      S3_SYNC_CONFIG_REGION: "placeHolder"
    stackDriverLoggingEnabled: false
  event-service:
    stackDriverLoggingEnabled: false
  nextgen-ce:
    cloudProviderConfig:
      GCP_PROJECT_ID: "placeHolder"
    stackDriverLoggingEnabled: false
cet:
  enable-receivers: true
  et-collector:
    autoscaling:
      enabled: true
      maxReplicas: 3
    et:
      java:
        heapSize: "1600m"
      redis:
        enabled: true
    replicaCount: 1
    resources:
      limits:
        memory: 2Gi
      requests:
        cpu: 100m
        memory: 2Gi
  et-receiver-agent:
    autoscaling:
      enabled: true
      maxReplicas: 3
    et:
      java:
        heapSize: "1600m"
      redisQueue:
        type: agent
    name: et-receiver-agent
    replicaCount: 1
    resources:
      limits:
        memory: 2Gi
      requests:
        cpu: 100m
        memory: 2Gi
  et-receiver-decompile:
    autoscaling:
      enabled: true
      maxReplicas: 3
    et:
      java:
        heapSize: "1600m"
      redisQueue:
        type: decompile
    name: et-receiver-decompile
    replicaCount: 1
    resources:
      limits:
        memory: 2Gi
      requests:
        cpu: 100m
        memory: 2Gi
  et-receiver-hit:
    autoscaling:
      enabled: true
      maxReplicas: 3
    et:
      java:
        heapSize: "1600m"
      redisQueue:
        type: hit
    name: et-receiver-hit
    replicaCount: 1
    resources:
      limits:
        memory: 2Gi
      requests:
        cpu: 100m
        memory: 2Gi
  et-receiver-sql:
    autoscaling:
      enabled: true
      maxReplicas: 3
    et:
      java:
        heapSize: "1600m"
      redisQueue:
        type: sql
    name: et-receiver-sql
    replicaCount: 1
    resources:
      limits:
        memory: 2Gi
      requests:
        cpu: 100m
        memory: 2Gi
  et-service:
    et:
      java:
        heapSize: "6400m"
      redis:
        enabled: true
    replicaCount: 1
    resources:
      limits:
        memory: 8Gi
      requests:
        cpu: 500m
        memory: 8Gi
chaos:
  chaos-driver:
    replicaCount: 3
    resources:
      limits:
        memory: 512Mi
      requests:
        cpu: 500m
        memory: 512Mi
  chaos-manager:
    replicaCount: 3
    resources:
      limits:
        memory: 512Mi
      requests:
        cpu: 600m
        memory: 512Mi
  chaos-web:
    replicaCount: 3
    resources:
      limits:
        memory: 512Mi
      requests:
        cpu: 500m
        memory: 512Mi
ci:
  ci-manager:
    autoscaling:
      enabled: true
      minReplicas: 2
    java:
      memory: "4096m"
    resources:
      limits:
        memory: 6192Mi
      requests:
        cpu: 1
        memory: 6192Mi
  ti-service:
    autoscaling:
      enabled: true
      minReplicas: 2
    jobresources:
      limits:
        memory: 3072Mi
      requests:
        cpu: 1
        memory: 3072Mi
    resources:
      limits:
        memory: 3072Mi
      requests:
        cpu: 1
        memory: 3072Mi
global:
  # -- Enable for complete airgap environment
  airgap: false
  ccm:
    # -- Enable to install Cloud Cloud Management
    enabled: false
  cd:
    # -- Enable to install CD
    enabled: true
  cg:
    enabled: false
  chaos:
    # -- Enable to install Chaos components(Beta)
    enabled: false
  ci:
    # -- Enable to install CI
    enabled: true
  # -- provide overrides to use in-cluster database or configure to use external databases
  database:
    clickhouse:
      enabled: false
    # -- settings to deploy mongo in-cluster or configure to use external mongo source
    mongo:
      # -- set additional arguments to mongo uri
      extraArgs: ""
      # --   set the mongo hosts if mongo.installed is set to false
      hosts: []
      # -- set false to configure external mongo and generate mongo uri protocol://hosts?extraArgs
      installed: true
      # -- provide the passwordKey to reference mongo password
      passwordKey: ""
      # -- set the protocol for mongo uri
      protocol: mongodb
      # -- provide the secretname to reference mongo username and password
      secretName: ""
      # -- provide the userKey to reference mongo username
      userKey: ""
  ff:
    # -- Enable to install  Feature Flags Component
    enabled: false
  gitops:
    # -- Enable to install GitOps
    enabled: false
  ha: true
  # -- Global Docker image registry
  imageRegistry: ""
  ingress:
    annotations: {}
    className: "harness"
    # --- Enable Nginx ingress controller gateway
    enabled: false
    # -- add global.ingress.ingressGatewayServiceUrl in hosts if global.ingress.ingressGatewayServiceUrl is not empty.
    hosts:
      - 'my-host.example.org'
    # NOTE: for ip-based installs, either use sslip.io for an IP-encoded DNS name
    # OR set the hosts entry to '*'
    # -- set to ingress controller's k8s service FQDN for internal routing. eg "internal-nginx.default.svc.cluster.local"
    # If not set, internal request routing would happen via global.loadbalancerUrl
    ingressGatewayServiceUrl: ""
    loadBalancerEnabled: false
    loadBalancerIP: '0.0.0.0'
    tls:
      enabled: false
      secretName: harness-cert
    useSelfSignedCert: false
  # --- Enable Istio Gateway
  istio:
    enabled: false
    gateway:
      # -- Enable to create istio-system gateway
      create: true
      # -- override the name of gateway
      name: ""
      # -- override the name of namespace to deploy gateway
      namespace: ""
      port: 443
      protocol: HTTPS
      # -- adds a gateway selector
      selector:
        istio: ingressgateway
    # -- add global.istio.istioGatewayServiceUrl in hosts if global.istio.istioGatewayServiceUrl is not empty.
    hosts:
      - '*'
    # -- set to istio gateway's k8s service FQDN for internal use case. eg "internal-istio-gateway.istio-system.svc.cluster.local"
    # If not set, internal request routing would happen via global.loadbalancerUrl
    istioGatewayServiceUrl: ""
    strict: false
    tls:
      credentialName:
      minProtocolVersion: TLSV1_2
      mode: SIMPLE
    virtualService:
      gateways:
        - ""
      # -- add global.istio.istioGatewayServiceUrl in hosts if global.istio.istioGatewayServiceUrl is not empty.
      hosts:
        - ""
  # -- set kubernetes version override, unrequired if installing using Helm.
  kubeVersion: ""
  license:
    # -- Insert CG License String to enable CG license
    cg: ''
    # -- Insert NG License String to enable NG license
    ng: ''
  # -- Fully qualified URL of your loadbalancer (ex: https://www.foo.com)
  loadbalancerURL: ""
  migrator:
    enabled: false
  mongoSSL: false
  ng:
    enabled: true
  ngGitSync:
    # -- Set to enable NG_GIT_SYNC and disable OLD_GIT_SYNC
    enabled: false
  ngcustomdashboard:
    # -- Enable to install  NG Custom Dashboards Component
    enabled: false
  opa:
    # -- Enable to install Open Policy Agent
    enabled: false
  # -- Enable to deploy postgres(needed for NG components)
  postgres:
    enabled: true
  saml:
    # --  Enabled will not send invites to email and autoaccepts
    autoaccept: false
  smtpCreateSecret:
    # -- Enable to create SMTP secretFile
    enabled: false
  srm:
    # -- Enable to install SRM
    enabled: false
  stackDriverLoggingEnabled: false
  sto:
    # -- Enable to install STO
    enabled: false
  # -- set storageClass for third party applications
  storageClass: ""
  storageClassName: ""
  # -- Set false to disable Immutable Delegate
  useImmutableDelegate: "true"
  # -- Set true to use delegate minimal image
  useMinimalDelegateImage: false
ngcustomdashboard:
  looker:
    config:
      # -- clickhouse database name
      clickhouseDatabase: 'ccm'
      # -- Leave empty if not deploying Clickhouse.
      # -- clickhouse hostname
      clickhouseHost: 'clickhouse'
      # -- clickhouse port
      clickhousePort: '8123'
      # -- clickhouse user
      clickhouseUser: 'default'
    ingress:
      # -- Required if ingress is enabled, Looker requires a separate DNS domain name to function
      host: ''
      tls:
        secretName: ''
    resources:
      limits:
        memory: 8Gi
      requests:
        cpu: 2
        memory: 8Gi
    secrets:
      # -- Required: Looker license key
      lookerLicenseKey: ""
  ng-custom-dashboards:
    config:
      # -- Required: domain name of your looker instance, this must be accessible by users in your organisation
      lookerPubDomain: ''
      # -- Required: HTTP scheme used, either http or https
      lookerPubScheme: 'https'
    resources:
      limits:
        memory: 1Gi
      requests:
        cpu: 1
        memory: 500Mi
## Platform Settings
platform:
  # -- Feature list to enable within platform.  Contact Harness for value
  access-control:
    appLogLevel: INFO
    autoscaling:
      enabled: true
      minReplicas: 2
    java:
      memory: 512m
    # -- set mongoHosts for external database hosts
    # -- mongoHosts:
    # -- - replica1.host.com:27017
    # -- - replica2.host.com:27017
    # -- - replica3.host.com:27017
    mongoHosts: []
    mongoSSL:
      enabled: false
    resources:
      limits:
        memory: 4096Mi
      requests:
        cpu: 1
        memory: 4096Mi
  bootstrap:
    database:
      minio:
        defaultBuckets: "logs"
        fullnameOverride: "minio"
        mode: standalone
        persistence:
          size: 200Gi
      mongodb:
        arbiter:
          affinity: {}
          nodeSelector: {}
          tolerations: []
        extraFlags:
          - "--wiredTigerCacheSizeGB=3"
        persistence:
          size: 200Gi
        replicaCount: 3
        resources:
          limits:
            memory: 8192Mi
          requests:
            cpu: 4
            memory: 8192Mi
      postgresql:
        auth:
          existingSecret: "postgres"
        primary:
          persistence:
            size: 200Gi
          resources:
            limits:
              memory: 8192Mi
            requests:
              cpu: 4
              memory: 8192Mi
      redis:
        redis:
          resources:
            limits:
              memory: 2048Mi
            requests:
              cpu: 1
              memory: 2048Mi
        replicaCount: 3
        sentinel:
          resources:
            limits:
              memory: 200Mi
            requests:
              cpu: 100m
              memory: 200Mi
        volumeClaimTemplate:
          resources:
            requests:
              storage: 10Gi
      timescaledb:
        autoscaling:
          enabled: false
        enabled: true
        replicaCount: 2
        resources:
          limits:
            memory: 2048Mi
          requests:
            cpu: 1
            memory: 2048Mi
        storage:
          capacity: 120Gi
    harness-secrets:
      enabled: true
    networking:
      defaultbackend:
        # -- Create will deploy a default backend into your cluster
        create: false
        image:
          digest: ""
          pullPolicy: IfNotPresent
          registry: k8s.gcr.io
          repository: defaultbackend-amd64
          # Overrides the image tag whose default is the chart appVersion.
          tag: "1.5"
      nginx:
        affinity: {}
        controller:
          # -- annotations to be addded to ingress Controller
          annotations: {}
        # -- Create Nginx Controller.  True will deploy a controller into your cluster
        create: false
        healthNodePort: ""
        healthPort: ""
        httpNodePort: ""
        httpsNodePort: ""
        # -- docker image to be used
        image:
          digest: ""
          pullPolicy: IfNotPresent
          registry: us.gcr.io
          repository: k8s-artifacts-prod/ingress-nginx/controller
          # Overrides the image tag whose default is the chart appVersion.
          tag: "v1.0.0-alpha.2"
        nodeSelector: {}
        objects:
          # -- annotations to be added to ingress Objects
          annotations: {}
        tolerations: []
  change-data-capture:
    appLogLevel: INFO
    autoscaling:
      enabled: false
      minReplicas: 2
    java:
      memory: 2048
    resources:
      limits:
        memory: 2880Mi
      requests:
        cpu: 1
        memory: 2880Mi
  delegate-proxy:
    autoscaling:
      enabled: false
    replicaCount: 1
    resources:
      limits:
        memory: 100Mi
      requests:
        cpu: 200m
        memory: 100Mi
  gateway:
    autoscaling:
      enabled: true
      minReplicas: 2
    java:
      memory: 2048
    resources:
      limits:
        memory: 3072Mi
      requests:
        cpu: 0.5
        memory: 3072Mi
  harness-manager:
    autoscaling:
      enabled: true
      minReplicas: 2
    external_graphql_rate_limit: "500"
    # -- These flags are used by the helper function to create the FEATURES config value based off the global.<feature>.enabled boolean
    # -- Feature Flags
    featureFlags:
      # -- Additional Feature Flag (placeholder to add any other featureFlags)
      ADDITIONAL: ""
      # -- Base flags for all modules(enabled by Default)
      Base: "LDAP_SSO_PROVIDER,ASYNC_ARTIFACT_COLLECTION,JIRA_INTEGRATION,AUDIT_TRAIL_UI,GDS_TIME_SERIES_SAVE_PER_MINUTE,STACKDRIVER_SERVICEGUARD,BATCH_SECRET_DECRYPTION,TIME_SERIES_SERVICEGUARD_V2,TIME_SERIES_WORKFLOW_V2,CUSTOM_DASHBOARD,GRAPHQL,CV_FEEDBACKS,LOGS_V2_247,UPGRADE_JRE,LOG_STREAMING_INTEGRATION,NG_HARNESS_APPROVAL,GIT_SYNC_NG,NG_SHOW_DELEGATE,NG_CG_TASK_ASSIGNMENT_ISOLATION,CI_OVERVIEW_PAGE,AZURE_CLOUD_PROVIDER_VALIDATION_ON_DELEGATE,TERRAFORM_AWS_CP_AUTHENTICATION,NG_TEMPLATES,NEW_DEPLOYMENT_FREEZE,HELM_CHART_AS_ARTIFACT,RESOLVE_DEPLOYMENT_TAGS_BEFORE_EXECUTION,WEBHOOK_TRIGGER_AUTHORIZATION,GITHUB_WEBHOOK_AUTHENTICATION,CUSTOM_MANIFEST,GIT_ACCOUNT_SUPPORT,AZURE_WEBAPP,LDAP_GROUP_SYNC_JOB_ITERATOR,POLLING_INTERVAL_CONFIGURABLE,APPLICATION_DROPDOWN_MULTISELECT,USER_GROUP_AS_EXPRESSION,RESOURCE_CONSTRAINT_SCOPE_PIPELINE_ENABLED,NG_TEMPLATE_GITX,ELK_HEALTH_SOURCE,NG_ENABLE_LDAP_CHECK,CVNG_METRIC_THRESHOLD,SRM_HOST_SAMPLING_ENABLE,SRM_ENABLE_HEALTHSOURCE_CLOUDWATCH_METRICS,NG_SETTINGS"
      # -- CCM Feature Flags (activated when global.ccm is enabled)
      CCM: "CENG_ENABLED,CCM_MICRO_FRONTEND,NODE_RECOMMENDATION_AGGREGATE"
      # -- CD Feature Flags (activated when global.cd is enabled)
      CD: ""
      # -- Custom Dashboard Flags (activated when global.dashboards is enabled)
      CDB: "NG_DASHBOARDS"
      # -- CHAOS Feature Flags (activated when global.chaos is enabled)
      CHAOS: "CHAOS_ENABLED"
      # -- CI Feature Flags (activated when global.ci is enabled)
      CI: "CING_ENABLED,CI_INDIRECT_LOG_UPLOAD,CI_LE_STATUS_REST_ENABLED"
      # -- FF Feature Flags (activated when global.ff is enabled)
      FF: "CFNG_ENABLED"
      # -- GitOps Feature Flags (activated when global.gitops is enabled)
      GitOps: "GITOPS_ONPREM_ENABLED,CUSTOM_ARTIFACT_NG,SERVICE_DASHBOARD_V2,OPTIMIZED_GIT_FETCH_FILES,MULTI_SERVICE_INFRA,ENV_GROUP,NG_SVC_ENV_REDESIGN"
      # -- NG Specific Feature Flags(activated when global.ng is enabled)
      NG: "ENABLE_DEFAULT_NG_EXPERIENCE_FOR_ONPREM,NEXT_GEN_ENABLED,NEW_LEFT_NAVBAR_SETTINGS,SPG_SIDENAV_COLLAPSE"
      # -- Disables OLD_GIT_SYNC if .global.ngGitSync is enabled
      OLDGITSYNC: "USE_OLD_GIT_SYNC"
      # -- OPA (activated when global.opa is enabled)
      OPA: "OPA_PIPELINE_GOVERNANCE"
      # -- AutoAccept Feature Flags
      SAMLAutoAccept: "AUTO_ACCEPT_SAML_ACCOUNT_INVITES,PL_NO_EMAIL_FOR_SAML_ACCOUNT_INVITES"
      # -- SRM Flags (activated when global.srm is enabled)
      SRM: "CVNG_ENABLED,ERROR_TRACKING_ENABLED"
      # -- STO Feature Flags (activated when global.sto is enabled)
      STO: "SECURITY,SECURITY_STAGE,STO_CI_PIPELINE_SECURITY,STO_API_V2"
    java:
      memory: "2048"
    resources:
      limits:
        memory: 3000Mi
      requests:
        cpu: 2
        memory: 3000Mi
  log-service:
    autoscaling:
      enabled: false
    replicaCount: 1
    resources:
      limits:
        memory: 3072Mi
      requests:
        cpu: 1
        memory: 3072Mi
  migrator:
    autoscaling:
      enabled: true
      minReplicas: 2
    java:
      memory: "2048"
    resources:
      limits:
        memory: 3000Mi
      requests:
        cpu: 2
        memory: 3000Mi
  next-gen-ui:
    autoscaling:
      enabled: true
      minReplicas: 2
    resources:
      limits:
        memory: 512Mi
      requests:
        cpu: 0.5
        memory: 512Mi
  ng-auth-ui:
    autoscaling:
      enabled: true
      minReplicas: 2
    resources:
      limits:
        memory: 512Mi
      requests:
        cpu: 0.5
        memory: 512Mi
  ng-manager:
    autoscaling:
      enabled: true
      minReplicas: 2
    java:
      memory: "4096m"
    resources:
      limits:
        memory: 6144Mi
      requests:
        cpu: 2
        memory: 6144Mi
  pipeline-service:
    autoscaling:
      enabled: true
      minReplicas: 2
    java:
      memory: "4096m"
    resources:
      limits:
        memory: 6144Mi
      requests:
        cpu: 1
        memory: 6144Mi
  platform-service:
    autoscaling:
      enabled: true
      minReplicas: 2
    java:
      memory: "3072m"
    resources:
      limits:
        memory: 4096Mi
      requests:
        cpu: 1
        memory: 4096Mi
  scm-service:
    autoscaling:
      enabled: false
    replicaCount: 1
    resources:
      limits:
        memory: 512Mi
      requests:
        cpu: 0.1
        memory: 512Mi
  template-service:
    autoscaling:
      enabled: true
      minReplicas: 2
    java:
      memory: "2048m"
    resources:
      limits:
        memory: 3000Mi
      requests:
        cpu: 0.7
        memory: 3000Mi
  ui:
    autoscaling:
      enabled: true
      minReplicas: 2
    resources:
      limits:
        memory: 512Mi
      requests:
        cpu: 0.5
        memory: 512Mi
srm:
  cv-nextgen:
    autoscaling:
      enabled: true
      minReplicas: 2
    java:
      memory: 2048
    resources:
      limits:
        memory: 3000Mi
      requests:
        cpu: 1
        memory: 3000Mi
  le-nextgen:
    autoscaling:
      enabled: true
      minReplicas: 2
    resources:
      limits:
        memory: 6132Mi
      requests:
        cpu: 4
        memory: 6132Mi
  learning-engine:
    autoscaling:
      enabled: true
      minReplicas: 2
    resources:
      limits:
        memory: 6132Mi
      requests:
        cpu: 4
        memory: 6132Mi
  verification-svc:
    autoscaling:
      enabled: true
      minReplicas: 2
    resources:
      limits:
        memory: 2048Mi
      requests:
        cpu: 1
        memory: 2048Mi
sto:
  sto-core:
    autoscaling:
      enabled: true
      minReplicas: 2
    resources:
      limits:
        memory: 500Mi
      requests:
        cpu: 500m
        memory: 500Mi
  sto-manager:
    autoscaling:
      enabled: true
      minReplicas: 2
    resources:
      limits:
        memory: 3072Mi
      requests:
        cpu: 1
        memory: 3072Mi
