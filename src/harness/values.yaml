global:
  # -- Airgap functionality. Disabled by default
  airgap: "false"
  # -- Add common annotations to all objects
  commonAnnotations: {}
  # -- Add common labels to all objects
  commonLabels: {}
  # -- Enable to install Cloud Cost Management (CCM) (Beta)
  ti:
    # -- Enable to install ti service
    enabled: true
  cdc:
    # -- Enable to install Change data capture
    enabled: true
  ccm:
    enabled: false
  # -- Enable to install Continuous Deployment (CD)
  cd:
    enabled: false
  # -- Enable to install First Generation Harness Platform (disabled by default)
  cg:
    enabled: false
  # -- Enable to install Chaos Engineering (CE) (Beta)
  chaos:
    enabled: false
  # -- Enable to install Continuous Integration (CI)
  ci:
    enabled: false
  # -- Enable to install Software Supply Chain Assurance (SSCA)
  ssca:
    enabled: false
  # -- provide overrides to use in-cluster database or configure to use external databases
  database:
    clickhouse:
      enabled: false
    # -- settings to deploy mongo in-cluster or configure to use external mongo source
    mongo:
      # -- set additional arguments to mongo uri
      extraArgs: ""
      # --   set the mongo hosts if mongo.installed is set to false
      hosts: []
      # -- set false to configure external mongo and generate mongo uri protocol://hosts?extraArgs
      installed: true
      # -- provide the passwordKey to reference mongo password
      passwordKey: ""
      # -- set the protocol for mongo uri
      protocol: mongodb
      # -- provide the secretname to reference mongo username and password
      secretName: ""
      # -- provide the userKey to reference mongo username
      userKey: ""
    postgres:
      ## - extra arguments set to connection string
      extraArgs: ""
      ## - host array for external
      hosts:
        - <postgres ip>:5432
      ## - set this to false if you want to use external postgre cluster
      installed: true
      ## - key within secret containing password
      passwordKey: "password"
      ## - protocol to use for connection
      protocol: postgres
      ## - secret name containing external postgresql credentials
      secretName: "postgres-secret"
      ## - key within secret containing username
      userKey: "user"
    redis:
      # --  provide host name for redis
      hosts:
        - <internal-endpoint-with-port>
      ## - set this to false if you want to use external redis cluster
      installed: true
      ## - key within secret containing password
      passwordKey: "password"
      ## - secret name containing external redis credentials
      secretName: "redis-user-pass"
      ## - key within secret containing username
      userKey: "username"
    timescaledb:
      ## - key name within secret containing certificates
      certKey: "cert"
      ## - secret name containing timescaledb certificates
      certName: "tsdb-cert"
      # --  provide host name for timescaledb
      hosts:
        - hostname.timescale.com:5432
      ## - set this to false if you want to use external timescaledb cluster
      installed: true
      ## - key within secret containing password
      passwordKey: "password"
      ## - secret name containing external timescaledb credentials
      secretName: "tsdb-secret"
      ## - set this to true if you want to enabled external timescaledb ssl traffic
      sslEnabled: false
      ## - key within secret containing username
      userKey: "username"
  # -- Enable to install Feature Flags (FF)
  ff:
    enabled: false
  # -- Enable to install gitops
  gitops:
    enabled: false
  # -- High availability: deploy 3 mongodb pods instead of 1. Not recommended for evaluation or POV
  ha: true
  # -- This private Docker image registry will override any registries that are defined in subcharts.
  imageRegistry: ""
  ## !! Enable Istio or ingress; do not enable both. If `istio.enabled` is true, `ingress.enabled` must not be.
  # --- Set `ingress.enabled` to `true` to create Kubernetes *Ingress* objects for Nginx.
  ingress:
    className: "harness"
    enabled: false
    # -- add global.ingress.ingressGatewayServiceUrl in hosts if global.ingress.ingressGatewayServiceUrl is not empty.
    hosts:
      - 'myhost.example.com'
    # -- set to ingress controller's k8s service FQDN for internal routing. eg "internal-nginx.default.svc.cluster.local"
    # If not set, internal request routing would happen via global.loadbalancerUrl
    ingressGatewayServiceUrl: ""
    objects:
      # -- annotations to be added to ingress Objects
      annotations: {}
    tls:
      enabled: true
      secretName: harness-cert
  # -- Istio Ingress Settings
  istio:
    enabled: false
    gateway:
      create: true
      # -- override the name of gateway
      name: ""
      # -- override the name of namespace to deploy gateway
      namespace: ""
      port: 443
      protocol: HTTPS
      # -- adds a gateway selector
      selector:
        istio: ingressgateway
    # -- add global.istio.istioGatewayServiceUrl in hosts if global.istio.istioGatewayServiceUrl is not empty.
    hosts:
      - '*'
    # -- set to istio gateway's k8s service FQDN for internal use case. eg "internal-istio-gateway.istio-system.svc.cluster.local"
    # If not set, internal request routing would happen via global.loadbalancerUrl
    istioGatewayServiceUrl: ""
    strict: false
    tls:
      credentialName: harness-cert
      minProtocolVersion: TLSV1_2
      mode: SIMPLE
    virtualService:
      # only used if .global.istio.gateway.create is set to false
      gateways: []
      # -- add global.istio.istioGatewayServiceUrl in hosts if global.istio.istioGatewayServiceUrl is not empty.
      hosts:
        - "myhostname.example.com"
  # -- set kubernetes version override, unrequired if installing using Helm.
  kubeVersion: ""
  # -- Place the license key, Harness support team will provide these
  license:
    cg: ''
    ng: ''
  # -- Provide your URL for your intended load balancer
  loadbalancerURL: https://myhostname.example.com
  lwd:
    autocud:
      enabled: false
    enabled: false
  migrator:
    enabled: false
  # -- Enable SSL for MongoDB service
  mongoSSL: false
  # -- Enable monitoring for all harness services: disabled by default
  monitoring:
    enabled: false
    path: /metrics
    port: 8889
  # -- Enable to install NG (Next Generation Harness Platform)
  ng:
    enabled: true
  # -- Enable to install Next Generation Custom Dashboards (Beta)
  ngcustomdashboard:
    enabled: false  
  servicediscoverymanager:
  # -- Enable to install Service Discovery Manager (Beta)
    enabled: false
  # -- Default Enabled, As required by multiple services now (OPA)
  opa:
    enabled: true
  # -- Enable to disable validation checks
  overrideValidation:
    restructuredValues: false
  # --  SAML auto acceptance. Enabled will not send invites to email and autoaccepts
  saml:
    autoaccept: false
  # -- Method to create a secret for your SMTP server
  smtpCreateSecret:
    enabled: false
  # -- Enable to install Site Reliability Management (SRM)
  srm:
    enabled: false
  # -- Enable stack driver logging
  stackDriverLoggingEnabled: false
  # -- Enable to install Security Test Orchestration (STO)
  sto:
    enabled: false
  # -- Configure storage class for Mongo,Timescale,Redis
  storageClass: ""
  # -- Configure storage class for Harness
  storageClassName: ""
  # -- Utilize immutable delegates (default = true)
  useImmutableDelegate: "true"
  # -- Use delegate minimal image (default = false)
  useMinimalDelegateImage: false
  # -- Set global.proxy.enabled to true if we want calls aws sdk calls to organization, cur, ce, iam to go through proxy
  # -- Set global.proxy.host to proxy host or Ip(ex: localhost, 127.0.0.1)
  # -- Set global.proxy.port to proxy port, it takes integer value
  # -- Set global.proxy.username and global.proxy.password to proxy username and password, if not required remove it or keep blank
  # -- Set global.proxy.protocol to http or https depending on the proxy configuration
  proxy:
    enabled: false
    host: localhost
    port: 80
    username: ""
    password: ""
    protocol: http
  # -- By default aws sdk uses respective services endpoint urls but in case we want to provide custom those endpoint urls we can use following
  # -- Set global.awsServiceEndpointUrls.enabled to true if we want to enable custom endpoint urls
  # -- Set global.awsServiceEndpointUrls.endPointRegion.host to valid AWS region where this endpoint is available
  # -- Set global.awsServiceEndpointUrls.stsEndPointUrl to set sts endpoint url
  # -- Set global.awsServiceEndpointUrls.ecsEndPointUrl to set ecs endpoint url
  # -- Set global.awsServiceEndpointUrls.cloudwatchEndPointUrl to set cloud watch endpoint url
  awsServiceEndpointUrls:
    enabled: false
    endPointRegion: us-east-2
    stsEndPointUrl: https://sts.us-east-2.amazonaws.com
    ecsEndPointUrl: https://ecs.us-east-2.amazonaws.com
    cloudwatchEndPointUrl: https://monitoring.us-east-2.amazonaws.com
  waitForInitContainer:
    enabled: true
    image:
      registry: docker.io
      repository: harness/helm-init-container
      pullPolicy: Always
      tag: "latest"
      digest: ""
      imagePullSecrets: []
  fileLogging:
    enabled: true
    path: "/opt/harness/logs/service.log"
    maxFileSize: 50MB
    maxBackupFileCount: 10
    totalFileSizeCap: 600MB
ccm:
  # -- Set ccm.batch-processing.clickhouse.enabled to true for AWS infrastructure
  batch-processing:
    # -- Set ccm.batch-processing.awsAccountTagsCollectionJobConfig.enabled to false for AWS infrastructure
    awsAccountTagsCollectionJobConfig:
      enabled: true
    cloudProviderConfig:
      CLUSTER_DATA_GCS_BACKUP_BUCKET: "placeHolder"
      CLUSTER_DATA_GCS_BUCKET: "placeHolder"
      DATA_PIPELINE_CONFIG_GCS_BASE_PATH: "placeHolder"
      GCP_PROJECT_ID: "placeHolder"
      S3_SYNC_CONFIG_BUCKET_NAME: "placeHolder"
      S3_SYNC_CONFIG_REGION: "placeHolder"
    # -- Set ccm.batch-processing.stackDriverLoggingEnabled to true for GCP infrastructure
    stackDriverLoggingEnabled: false
    # -- This proxy is used by S3 sync bucket aws cli command
    # -- Set ccm.batch-processing.cliProxy.enabled to true if we want calls aws sdk calls to organization, cur, ce, iam to go through proxy
    # -- Set ccm.batch-processing.cliProxy.host to proxy host or Ip(ex: localhost, 127.0.0.1)
    # -- Set ccm.batch-processing.cliProxy.port to proxy port, it takes integer value
    # -- Set ccm.batch-processing.cliProxy.username and ccm.batch-processing.cliProxy.password to proxy username and password, if not required remove it or keep blank
    # -- Set ccm.batch-processing.cliProxy.protocol to http or https depending on the proxy configuration
    cliProxy:
      enabled: false
      host: localhost
      port: 80
      username: ""
      password: ""
      protocol: http
  cloud-info:
    # -- Set ccm.cloud-info.proxy.httpsProxyEnabled to true if we want calls aws sdk calls to ec2, pricing to go through proxy
    # -- Set ccm.cloud-info.proxy.httpsProxyUrl to proxy url(ex: http://localhost:8080, if http proxy is running on localhost port 8080)
    proxy:
      httpsProxyEnabled: false
      httpsProxyUrl: http://localhost
  ce-nextgen:
    cloudProviderConfig:
      GCP_PROJECT_ID: "placeHolder"
    # -- Set ccm.nextgen-ce.stackDriverLoggingEnabled to true for GCP infrastructure
    stackDriverLoggingEnabled: false
  # -- Set ccm.event-service.stackDriverLoggingEnabled to true for GCP infrastructure
  event-service:
    stackDriverLoggingEnabled: false
chaos:
  chaos-manager:
    nodeSelector: {}
    tolerations: []
  chaos-web:
    nodeSelector: {}
    tolerations: []
  chaos-common:
    installLinuxCRDs: false
  chaos-k8s-ifs:
    nodeSelector: {}
    tolerations: [] 
  chaos-linux-ifc:
    nodeSelector: {}
    tolerations: []
  chaos-linux-ifs:
    nodeSelector: {}
    tolerations: []
  chaos-machine-ifc:
    nodeSelector: {}
    tolerations: []
  chaos-machine-ifs:
    nodeSelector: {}
    tolerations: []
# -- Install the Continuous Integration (CI) manager pod
ci:
  ci-manager:
    affinity: {}
    nodeSelector: {}
    tolerations: []
  ti-service:
    affinity: {}
    nodeSelector: {}
    tolerations: []
enabled: false
# -- Config for platform-level services (always deployed by default to support all services)
platform:
  # -- Access control settings (taints, tolerations, and so on)
  access-control:
    affinity: {}
    # -- set mongoHosts for external database hosts
    # -- mongoHosts:
    # -- - replica1.host.com:27017
    # -- - replica2.host.com:27017
    # -- - replica3.host.com:27017
    mongoHosts: []
    # -- enable mongoSSL for external database connections
    mongoSSL:
      enabled: false
    nodeSelector: {}
    tolerations: []
  bootstrap:
    database:
      clickhouse:
        enabled: false
      minio:
        affinity: {}
        nodeSelector: {}
        tolerations: []
      mongodb:
        affinity: {}
        arbiter:
          affinity: {}
          nodeSelector: {}
          tolerations: []
        metrics:
          enabled: false
        nodeSelector: {}
        podAnnotations:
          prometheus.io/path: /metrics
          prometheus.io/port: '9216'
          prometheus.io/scrape: 'false'
        tolerations: []
      postgresql:
        auth:
          existingSecret: "postgres"
        metrics:
          enabled: false
        podAnnotations:
          prometheus.io/path: /metrics
          prometheus.io/port: '9187'
          prometheus.io/scrape: 'false'
      redis:
        affinity: {}
        metrics:
          enabled: false
        nodeSelector: {}
        podAnnotations:
          prometheus.io/path: /metrics
          prometheus.io/port: '9121'
          prometheus.io/scrape: 'false'
        tolerations: []
      timescaledb:
        affinity: {}
        nodeSelector: {}
        podAnnotations:
          prometheus.io/path: /metrics
          prometheus.io/port: '9187'
          prometheus.io/scrape: 'false'
        prometheus:
          enabled: false
        tolerations: []
        persistentVolumes:
          data:
            enabled: true
            size: 100Gi
          wal:
            enabled: true
            size: 1Gi
    harness-secrets:
      enabled: true
      # -- learning-engine (taints, tolerations, and so on)
    networking:
      defaultbackend:
        # -- Create will deploy a default backend into your cluster
        create: false
        resources:
          limits:
            memory: 20Mi
          requests:
            cpu: 10m
            memory: 20Mi
      nginx:
        affinity: {}
        controller:
          # -- annotations to be addded to ingress Controller
          annotations: {}
        # -- Create Nginx Controller.  True will deploy a controller into your cluster
        create: false
        healthNodePort: ""
        healthPort: ""
        httpNodePort: ""
        httpsNodePort: ""
        loadBalancerEnabled: false
        loadBalancerIP: '0.0.0.0'
        nodeSelector: {}
        resources:
          limits:
            memory: '512Mi'
          requests:
            cpu: '0.5'
            memory: '512Mi'
        tolerations: []
  # -- change-data-capture settings (taints, tolerations, and so on)
  change-data-capture:
    affinity: {}
    nodeSelector: {}
    tolerations: []
  # -- delegate proxy settings (taints, tolerations, and so on)
  delegate-proxy:
    affinity: {}
    nodeSelector: {}
    tolerations: []
  # -- gateway settings (taints, tolerations, and so on)
  gateway:
    affinity: {}
    nodeSelector: {}
    tolerations: []
  # -- harness-manager (taints, tolerations, and so on)
  harness-manager:
    affinity: {}
    # -- These flags are used by the helper function to create the FEATURES config value based off the global.<feature>.enabled boolean
    # -- Feature Flags
    featureFlags:
      # -- Additional Feature Flag (placeholder to add any other featureFlags)
      ADDITIONAL: ""
    nodeSelector: {}
    tolerations: []
  # -- log-service (taints, tolerations, and so on)
  log-service:
    affinity: {}
    nodeSelector: {}
    tolerations: []
  looker:
    affinity: {}
    nodeSelector: {}
    tolerations: []
  # -- migrator (taints, tolerations, and so on)
  migrator:
    affinity: {}
    nodeSelector: {}
    tolerations: []
  # -- next-gen-ui (Next Generation User Interface) (taints, tolerations, and so on)
  next-gen-ui:
    affinity: {}
    nodeSelector: {}
    tolerations: []
  # -- ng-auth-ui (Next Generation Authorization User Interface) (taints, tolerations, and so on)
  ng-auth-ui:
    affinity: {}
    nodeSelector: {}
    tolerations: []
  ng-custom-dashboards:
    affinity: {}
    nodeSelector: {}
    tolerations: []
  # -- ng-manager (Next Generation Manager) (taints, tolerations, and so on)
  ng-manager:
    affinity: {}
    nodeSelector: {}
    tolerations: []
  # -- pipeline-service (Harness pipeline-related services) (taints, tolerations, and so on)
  pipeline-service:
    affinity: {}
    nodeSelector: {}
    tolerations: []
  # -- platform-service (Harness platform-related services) (taints, tolerations, and so on)
  platform-service:
    affinity: {}
    nodeSelector: {}
    tolerations: []
  # -- scm-service (taints, tolerations, and so on)
  scm-service:
    affinity: {}
    nodeSelector: {}
    tolerations: []
  # -- template-service (Harness template-related services) (taints, tolerations, and so on)
  template-service:
    affinity: {}
    nodeSelector: {}
    tolerations: []
  # -- ui (Harness First CG Ui component) (taints, tolerations, and so on)
  ui:
    affinity: {}
    nodeSelector: {}
    tolerations: []
srm:
  cv-nextgen:
    affinity: {}
    nodeSelector: {}
    tolerations: []
  le-nextgen:
    affinity: {}
    nodeSelector: {}
    tolerations: []
  learning-engine:
    affinity: {}
    nodeSelector: {}
    tolerations: []
  verification-svc:
    affinity: {}
    nodeSelector: {}
    tolerations: []
# -- Config for Security Test Orchestration (STO)
sto:
  # -- Install the STO core
  sto-core:
    affinity: {}
    autoscaling:
      enabled: false
    nodeSelector: {}
    tolerations: []
  # -- Install the STO manager
  sto-manager:
    affinity: {}
    autoscaling:
      enabled: false
    nodeSelector: {}
    tolerations: []
