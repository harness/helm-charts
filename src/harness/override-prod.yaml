## Global Settings
global:
  # -- Enable for complete airgap environment
  airgap: false
  ha: true
  # -- Global Docker image registry
  imageRegistry: ""
  # -- Fully qualified URL of your loadbalancer (ex: https://www.foo.com)
  loadbalancerURL: ""
  # -- provide overrides to use in-cluster database or configure to use external databases
  database:
    # -- settings to deploy mongo in-cluster or configure to use external mongo source
    mongo:
      # -- set false to configure external mongo and generate mongo uri protocol://hosts?extraArgs
      installed: true
      # -- set the protocol for mongo uri
      protocol: mongodb
      # --   set the mongo hosts if mongo.installed is set to false
      hosts: []
      # -- provide the secretname to reference mongo username and password
      secretName: ""
      # -- provide the userKey to reference mongo username
      userKey: ""
      # -- provide the passwordKey to reference mongo password
      passwordKey: ""
      # -- set additional arguments to mongo uri
      extraArgs: ""
  mongoSSL: false
  storageClassName: ""
  # -- set storageClass for third party applications
  storageClass: ""
  stackDriverLoggingEnabled: false
  cg:
    enabled: false
  migrator:
    enabled: false
  ng:
    enabled: true
  # -- Enable to deploy postgres(needed for NG components)
  postgres:
    enabled: true
  cd:
    # -- Enable to install CD
    enabled: true
  ci:
    # -- Enable to install CI
    enabled: true
  sto:
    # -- Enable to install STO
    enabled: false
  srm:
    # -- Enable to install SRM
    enabled: false
  ngcustomdashboard:
    # -- Enable to install  NG Custom Dashboards Component
    enabled: false
  ff:
    # -- Enable to install  Feature Flags Component
    enabled: false
  gitops:
    # -- Enable to install GitOps
    enabled: false
  opa:
    # -- Enable to install Open Policy Agent
    enabled: false
  ccm:
    # -- Enable to install Cloud Cloud Management
    enabled: false
  chaos:
    # -- Enable to install Chaos components(Beta)
    enabled: false
  saml:
    # --  Enabled will not send invites to email and autoaccepts
    autoaccept: false
  license:
    # -- Insert CG License String to enable CG license
    cg: ''
    # -- Insert NG License String to enable NG license
    ng: ''
  ngGitSync:
    # -- Set to enable NG_GIT_SYNC and disable OLD_GIT_SYNC
    enabled: false
  # -- Set false to disable Immutable Delegate
  useImmutableDelegate: "true"
  # -- Set true to use delegate minimal image
  useMinimalDelegateImage: false
  smtpCreateSecret:
    # -- Enable to create SMTP secretFile
    enabled: false
  # --- Enable Istio Gateway
  istio:
    enabled: false
    strict: false
    gateway:
      # -- Enable to create istio-system gateway
      create: true
      port: 443
      # -- override the name of gateway
      name: ""
      # -- override the name of namespace to deploy gateway
      namespace: ""
      # -- adds a gateway selector
      selector:
        istio: ingressgateway
      protocol: HTTPS
    hosts:
      - '*'
    tls:
      credentialName:
      minProtocolVersion: TLSV1_2
      mode: SIMPLE
    virtualService:
      gateways:
        - ""
      hosts:
        - ""

  ingress:
    # --- Enable Nginx ingress controller gateway
    enabled: false
    annotations: {}
    loadBalancerIP: '0.0.0.0'
    className: "harness"
    loadBalancerEnabled: false
    useSelfSignedCert: false

    # NOTE: for ip-based installs, either use sslip.io for an IP-encoded DNS name
    # OR set the hosts entry to '*'
    hosts:
      - 'my-host.example.org'
    tls:
      enabled: false
      secretName: harness-cert

    nginx:
      # -- Create Nginx Controller.  True will deploy a controller into your cluster
      create: false
      controller:
        # -- annotations to be addded to ingress Controller
        annotations: {}
      objects:
        # -- annotations to be added to ingress Objects
        annotations: {}
      # -- docker image to be used
      image:
        registry:  us.gcr.io
        repository: k8s-artifacts-prod/ingress-nginx/controller
        pullPolicy: IfNotPresent
        # Overrides the image tag whose default is the chart appVersion.
        tag: "v1.0.0-alpha.2"
        digest: ""

    defaultbackend:
      # -- Create will deploy a default backend into your cluster
      create: false
      image:
        registry: k8s.gcr.io
        repository: defaultbackend-amd64
        pullPolicy: IfNotPresent
        # Overrides the image tag whose default is the chart appVersion.
        tag: "1.5"
        digest: ""


## Platform Settings
platform:
  # -- Feature list to enable within platform.  Contact Harness for value
  access-control:
    # -- set mongoHosts for external database hosts
    # -- mongoHosts:
    # -- - replica1.host.com:27017
    # -- - replica2.host.com:27017
    # -- - replica3.host.com:27017
    mongoHosts: []
    mongoSSL:
      enabled: false
    autoscaling:
      enabled: true
      minReplicas: 2
    appLogLevel: INFO
    java:
      memory: 512m
    resources:
      limits:
        cpu: 1
        memory: 4096Mi
      requests:
        cpu: 1
        memory: 4096Mi

  change-data-capture:
    appLogLevel: INFO
    java:
      memory: 2048
    resources:
      limits:
        cpu: 1
        memory: 2880Mi
      requests:
        cpu: 1
        memory: 2880Mi
    autoscaling:
      enabled: false
      minReplicas: 2

  cv-nextgen:
    java:
      memory: 2048
    resources:
      limits:
        cpu: 1
        memory: 3000Mi
      requests:
        cpu: 1
        memory: 3000Mi
    autoscaling:
      enabled: true
      minReplicas: 2

  delegate-proxy:
    resources:
      limits:
        cpu: 200m
        memory: 100Mi
      requests:
        cpu: 200m
        memory: 100Mi
    autoscaling:
      enabled: false
    replicaCount: 1

  gateway:
    java:
      memory: 2048
    resources:
      limits:
        cpu: 0.5
        memory: 3072Mi
      requests:
        cpu: 0.5
        memory: 3072Mi
    autoscaling:
      enabled: true
      minReplicas: 2

  harness-manager:
    external_graphql_rate_limit: "500"
    autoscaling:
      enabled: true
      minReplicas: 2
    java:
      memory: "2048"
    resources:
      limits:
        cpu: 2
        memory: 3000Mi
      requests:
        cpu: 2
        memory: 3000Mi

  harness-secrets:
    enabled: true

  learning-engine:
    autoscaling:
      enabled: true
      minReplicas: 2
    resources:
      limits:
        cpu: 4
        memory: 6132Mi
      requests:
        cpu: 4
        memory: 6132Mi

  le-nextgen:
    autoscaling:
      enabled: true
      minReplicas: 2
    resources:
      limits:
        cpu: 4
        memory: 6132Mi
      requests:
        cpu: 4
        memory: 6132Mi

  log-service:
    autoscaling:
      enabled: false
    replicaCount: 1
    resources:
      limits:
        cpu: 1
        memory: 3072Mi
      requests:
        cpu: 1
        memory: 3072Mi

  migrator:
    autoscaling:
      enabled: true
      minReplicas: 2
    java:
      memory: "2048"
    resources:
      limits:
        cpu: 2
        memory: 3000Mi
      requests:
        cpu: 2
        memory: 3000Mi

  minio:
    fullnameOverride: "minio"
    mode: standalone
    defaultBuckets: "logs"
    persistence:
      size: 200Gi

  mongodb:
    replicaCount: 3
    resources:
      limits:
        cpu: 4
        memory: 8192Mi
      requests:
        cpu: 4
        memory: 8192Mi
    persistence:
      size: 200Gi
    extraFlags:
      - "--wiredTigerCacheSizeGB=3"
    arbiter:
      affinity: {}
      nodeSelector: {}
      tolerations: []

  next-gen-ui:
    autoscaling:
      enabled: true
      minReplicas: 2
    resources:
      limits:
        cpu: 0.5
        memory: 512Mi
      requests:
        cpu: 0.5
        memory: 512Mi

  ng-auth-ui:
    autoscaling:
      enabled: true
      minReplicas: 2
    resources:
      limits:
        cpu: 0.5
        memory: 512Mi
      requests:
        cpu: 0.5
        memory: 512Mi

  ng-manager:
    autoscaling:
      enabled: true
      minReplicas: 2
    java:
      memory: "4096m"
    resources:
      limits:
        cpu: 2
        memory: 6144Mi
      requests:
        cpu: 2
        memory: 6144Mi

  pipeline-service:
    autoscaling:
      enabled: true
      minReplicas: 2
    java:
      memory: "4096m"
    resources:
      limits:
        cpu: 1
        memory: 6144Mi
      requests:
        cpu: 1
        memory: 6144Mi

  platform-service:
    autoscaling:
      enabled: true
      minReplicas: 2
    java:
      memory: "3072m"
    resources:
      limits:
        cpu: 1
        memory: 4096Mi
      requests:
        cpu: 1
        memory: 4096Mi

  redis:
    redis:
      resources:
        limits:
          cpu: 1
          memory: 2048Mi
        requests:
          cpu: 1
          memory: 2048Mi
    replicaCount: 3
    sentinel:
      resources:
        limits:
          cpu: 100m
          memory: 200Mi
        requests:
          cpu: 100m
          memory: 200Mi
    volumeClaimTemplate:
      resources:
        requests:
          storage: 10Gi

  scm-service:
    autoscaling:
      enabled: false
    replicaCount: 1
    resources:
      limits:
        cpu: 0.1
        memory: 512Mi
      requests:
        cpu: 0.1
        memory: 512Mi

  template-service:
    autoscaling:
      enabled: true
      minReplicas: 2
    java:
      memory: "2048m"
    resources:
      limits:
        cpu: 1
        memory: 3000Mi
      requests:
        cpu: 0.7
        memory: 3000Mi

  ti-service:
    autoscaling:
      enabled: true
      minReplicas: 2
    jobresources:
      limits:
        cpu: 1
        memory: 3072Mi
      requests:
        cpu: 1
        memory: 3072Mi
    resources:
      limits:
        cpu: 1
        memory: 3072Mi
      requests:
        cpu: 1
        memory: 3072Mi

  timescaledb:
    enabled: true
    autoscaling:
      enabled: false
    replicaCount: 2
    resources:
      limits:
        cpu: 1
        memory: 2048Mi
      requests:
        cpu: 1
        memory: 2048Mi
    storage:
      capacity: 120Gi

  ui:
    autoscaling:
      enabled: true
      minReplicas: 2
    resources:
      limits:
        cpu: 0.5
        memory: 512Mi
      requests:
        cpu: 0.5
        memory: 512Mi

  verification-svc:
    autoscaling:
      enabled: true
      minReplicas: 2
    resources:
      limits:
        cpu: 1
        memory: 2048Mi
      requests:
        cpu: 1
        memory: 2048Mi


ci:
  ci-manager:
    autoscaling:
      enabled: true
      minReplicas: 2
    java:
      memory: "4096m"
    resources:
      limits:
        cpu: 1
        memory: 6192Mi
      requests:
        cpu: 1
        memory: 6192Mi

sto:
  sto-core:
    autoscaling:
      enabled: true
      minReplicas: 2
    resources:
      limits:
        cpu: 500m
        memory: 500Mi
      requests:
        cpu: 500m
        memory: 500Mi
  sto-manager:
    autoscaling:
      enabled: true
      minReplicas: 2
    resources:
      limits:
        cpu: 1
        memory: 3072Mi
      requests:
        cpu: 1
        memory: 3072Mi
infra:
  postgresql:
    auth:
      existingSecret: "postgres"
    primary:
      persistence:
        size: 200Gi
      resources:
        limits:
          cpu: 4
          memory: 8192Mi
        requests:
          cpu: 4
          memory: 8192Mi
srm:
  enable-receivers: true
  et-service:
    et:
      java:
        heapSize: "6400m"
      redis:
        enabled: true
    replicaCount: 1
    resources:
      limits:
        cpu: 2
        memory: 8Gi
      requests:
        cpu: 500m
        memory: 8Gi
  et-collector:
    et:
      java:
        heapSize: "1600m"
      redis:
        enabled: true
    autoscaling:
      enabled: true
      maxReplicas: 3

    replicaCount: 1
    resources:
      limits:
        cpu: 1
        memory: 2Gi
      requests:
        cpu: 100m
        memory: 2Gi
  et-receiver-hit:
    name: et-receiver-hit
    et:
      redisQueue:
        type: hit
      java:
        heapSize: "1600m"
    autoscaling:
      enabled: true
      maxReplicas: 3
    replicaCount: 1
    resources:
      limits:
        cpu: 1
        memory: 2Gi
      requests:
        cpu: 100m
        memory: 2Gi
  et-receiver-decompile:
    name: et-receiver-decompile
    et:
      redisQueue:
        type: decompile
      java:
        heapSize: "1600m"
    autoscaling:
      enabled: true
      maxReplicas: 3
    replicaCount: 1
    resources:
      limits:
        cpu: 2
        memory: 2Gi
      requests:
        cpu: 100m
        memory: 2Gi
  et-receiver-agent:
    name: et-receiver-agent
    et:
      redisQueue:
        type: agent
      java:
        heapSize: "1600m"
    autoscaling:
      enabled: true
      maxReplicas: 3
    replicaCount: 1
    resources:
      limits:
        cpu: 1
        memory: 2Gi
      requests:
        cpu: 100m
        memory: 2Gi
  et-receiver-sql:
    name: et-receiver-sql
    et:
      redisQueue:
        type: sql
      java:
        heapSize: "1600m"
    autoscaling:
      enabled: true
      maxReplicas: 3
    replicaCount: 1
    resources:
      limits:
        cpu: 1
        memory: 2Gi
      requests:
        cpu: 100m
        memory: 2Gi

ngcustomdashboard:
  looker:
    resources:
      limits:
        memory: 8Gi
      requests:
        cpu: 2
        memory: 8Gi
    secrets:
      # -- Required: Looker license key
      lookerLicenseKey: ""
    config:
      # -- Leave empty if not deploying Clickhouse.
      # -- clickhouse hostname
      clickhouseHost: 'clickhouse'
      # -- clickhouse port
      clickhousePort: '8123'
      # -- clickhouse database name
      clickhouseDatabase: 'ccm'
      # -- clickhouse user
      clickhouseUser: 'default'
    ingress:
      # -- Required if ingress is enabled, Looker requires a separate DNS domain name to function
      host: ''
      tls:
        secretName: ''
  ng-custom-dashboards:
    resources:
      limits:
        cpu: 2
        memory: 1Gi
      requests:
        cpu: 1
        memory: 500Mi
    config:
      # -- Required: domain name of your looker instance, this must be accessible by users in your organisation
      lookerPubDomain: ''
      # -- Required: HTTP scheme used, either http or https
      lookerPubScheme: 'https'

# -- Set ccm.clickhouse.enabled to true for AWS infrastructure
# -- Set ccm.batch-processing.clickhouse.enabled to true for AWS infrastructure
# -- Set ccm.nextgen-ce.clickhouse.enabled to true for AWS infrastructure
# -- Set ccm.batch-processing.awsAccountTagsCollectionJobConfig.enabled to false for AWS infrastructure
# -- Set ccm.event-service.stackDriverLoggingEnabled to true for GCP infrastructure
# -- Set ccm.batch-processing.stackDriverLoggingEnabled to true for GCP infrastructure
# -- Set ccm.nextgen-ce.stackDriverLoggingEnabled to true for GCP infrastructure
ccm:
  clickhouse:
    enabled: false
  event-service:
    stackDriverLoggingEnabled: false
  batch-processing:
    stackDriverLoggingEnabled: false
    cloudProviderConfig:
      CLUSTER_DATA_GCS_BACKUP_BUCKET: "placeHolder"
      CLUSTER_DATA_GCS_BUCKET: "placeHolder"
      DATA_PIPELINE_CONFIG_GCS_BASE_PATH: "placeHolder"
      GCP_PROJECT_ID: "placeHolder"
      S3_SYNC_CONFIG_BUCKET_NAME: "placeHolder"
      S3_SYNC_CONFIG_REGION: "placeHolder"
    clickhouse:
      enabled: false
    awsAccountTagsCollectionJobConfig:
      enabled: true
  nextgen-ce:
    stackDriverLoggingEnabled: false
    cloudProviderConfig:
      GCP_PROJECT_ID: "placeHolder"
    clickhouse:
      enabled: false

ng-manager:
  ceGcpSetupConfigGcpProjectId: "placeHolder"

chaos:
  chaos-manager:
    replicaCount: 3
    resources:
      limits:
        cpu: 600m
        memory: 512Mi
      requests:
        cpu: 600m
        memory: 512Mi

  chaos-driver:
    replicaCount: 3
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        memory: 512Mi

  chaos-web:
    replicaCount: 3
    resources:
      limits:
        cpu: 500m
        memory: 512Mi
      requests:
        cpu: 500m
        memory: 512Mi
