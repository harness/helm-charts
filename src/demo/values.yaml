## Global Settings
global:
  # -- Enable for complete airgap environment
  airgap: false
  ha: true
  # -- Global Docker image registry
  imageRegistry: ""
  # -- Fully qualified URL of your loadbalancer (ex: https://www.foo.com)
  loadbalancerURL: ""
  mongoSSL: false
  storageClassName: ""

  sto:
    # -- Enable to install STO
    enabled: false

  srm:
    # -- Enable to install SRM
    enabled: false

  ngcustomdashboard:
    # -- Enabled will deploy NG Customer Dashboards
    enabled: false

  ff:
    # -- Enabled will deploy Feature Flags Component
    enabled: false

  istio:
    enabled: false
    gateway:
      # -- Enable to create istio-system gateway
      create: true
      port: 443
      protocol: HTTPS
    hosts:
      - '*'
    tls:
      credentialName:
      minProtocolVersion: TLSV1_2
      mode: SIMPLE
    virtualService:
      gateways:
        - ""
      hosts:
        - ""

  ingress:
    enabled: false
    createNginxIngressController: false
    createDefaultBackend: false
    loadBalancerIP: '0.0.0.0'
    className: "harness"
    loadBalancerEnabled: false
    useSelfSignedCert: false
    nginx:
      image:
        registry:  us.gcr.io
        repository: k8s-artifacts-prod/ingress-nginx/controller
        pullPolicy: IfNotPresent
        # Overrides the image tag whose default is the chart appVersion.
        tag: "v1.0.0-alpha.2"
        digest: ""
    defaultbackend:
      image:
        registry: k8s.gcr.io
        repository: defaultbackend-amd64
        pullPolicy: IfNotPresent
        # Overrides the image tag whose default is the chart appVersion.
        tag: "1.5"
        digest: ""
    hosts:
      - 'my-host.example.org'
    tls:
      enabled: false
      secretName: harness-ssl

## Platform Settings
harness:
  platform:
    # -- Feature list to enable within platform.  Contact Harness for value
    access-control:
      autoscaling:
        enabled: false
      replicaCount: 1
      appLogLevel: INFO
      java:
        memory: 512m
      resources:
        limits:
          cpu: 1
          memory: 4096Mi
        requests:
          cpu: 1
          memory: 4096Mi

    change-data-capture:
      appLogLevel: INFO
      java:
        memory: 2048
      resources:
        limits:
          cpu: 1
          memory: 2880Mi
        requests:
          cpu: 1
          memory: 2880Mi
      autoscaling:
        enabled: false
      replicaCount: 1

    cv-nextgen:
      java:
        memory: 1024
      resources:
        limits:
          cpu: 0.5
          memory: 1440Mi
        requests:
          cpu: 0.5
          memory: 1440Mi
      autoscaling:
        enabled: false
      replicaCount: 1

    delegate-proxy:
      resources:
        limits:
          cpu: 200m
          memory: 100Mi
        requests:
          cpu: 200m
          memory: 100Mi
      autoscaling:
        enabled: false
      replicaCount: 1

    gateway:
      java:
        memory: 1024
      resources:
        limits:
          cpu: 0.5
          memory: 1300Mi
        requests:
          cpu: 0.2
          memory: 1300Mi
      autoscaling:
        enabled: false
      replicaCount: 1

    harness-manager:
      external_graphql_rate_limit: "500"
      autoscaling:
        enabled: false
      replicaCount: 1
      java:
        memory: "2048"
      resources:
        limits:
          cpu: 0.5
          memory: 3000Mi
        requests:
          cpu: 0.5
          memory: 3000Mi

    le-nextgen:
      autoscaling:
        enabled: false
      replicaCount: 1
      resources:
        limits:
          cpu: 0.5
          memory: 512Mi
        requests:
          cpu: 0.5
          memory: 512Mi

    log-service:
      autoscaling:
        enabled: false
      replicaCount: 1
      resources:
        limits:
          cpu: 0.5
          memory: 1400Mi
        requests:
          cpu: 0.5
          memory: 1400Mi
    minio:
      fullnameOverride: "minio"
      mode: standalone
      defaultBuckets: "logs"
      persistence:
        size: 10Gi

    mongodb:
      replicaCount: 1
      resources:
        limits:
          cpu: 2
          memory: 2048Mi
        requests:
          cpu: 1
          memory: 2048Mi
      persistence:
        size: 20Gi
      args:
        - "--wiredTigerCacheSizeGB=0.5"

    next-gen-ui:
      autoscaling:
        enabled: false
      replicaCount: 1
      resources:
        limits:
          cpu: 0.2
          memory: 200Mi
        requests:
          cpu: 0.2
          memory: 200Mi

    ng-auth-ui:
      autoscaling:
        enabled: false
      replicaCount: 1
      resources:
        limits:
          cpu: 0.2
          memory: 200Mi
        requests:
          cpu: 0.2
          memory: 200Mi

    ng-manager:
      autoscaling:
        enabled: false
      replicaCount: 1
      java:
        memory: "4096m"
      resources:
        limits:
          cpu: 0.5
          memory: 6144Mi
        requests:
          cpu: 0.5
          memory: 6144Mi

    pipeline-service:
      autoscaling:
        enabled: false
      replicaCount: 1
      java:
        memory: "1024m"
      resources:
        limits:
          cpu: 0.5
          memory: 1400Mi
        requests:
          cpu: 0.5
          memory: 1400Mi

    platform-service:
      autoscaling:
        enabled: false
      replicaCount: 1
      java:
        memory: "2048m"
      resources:
        limits:
          cpu: 0.5
          memory: 3000Mi
        requests:
          cpu: 0.5
          memory: 3000Mi

    redis:
      useAntiAffinity: false
      redis:
        resources:
          limits:
            cpu: 1
            memory: 2048Mi
          requests:
            cpu: 1
            memory: 2048Mi
      replicaCount: 3
      sentinel:
        resources:
          limits:
            cpu: 100m
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 200Mi
      volumeClaimTemplate:
        resources:
          requests:
            storage: 10Gi

    scm-service:
      autoscaling:
        enabled: false
      replicaCount: 1
      resources:
        limits:
          cpu: 0.1
          memory: 512Mi
        requests:
          cpu: 0.1
          memory: 512Mi

    template-service:
      autoscaling:
        enabled: false
      replicaCount: 1
      java:
        memory: "1024m"
      resources:
        limits:
          cpu: 0.5
          memory: 1500Mi
        requests:
          cpu: 0.5
          memory: 1500Mi

    ti-service:
      autoscaling:
        enabled: false
      replicaCount: 1
      jobresources:
        limits:
          cpu: 0.5
          memory: 1400Mi
        requests:
          cpu: 0.5
          memory: 1400Mi
      resources:
        limits:
          cpu: 0.5
          memory: 1400Mi
        requests:
          cpu: 0.5
          memory: 1400Mi

    timescaledb:
      autoscaling:
        enabled: false
      replicaCount: 1
      resources:
        limits:
          cpu: 0.3
          memory: 512Mi
        requests:
          cpu: 0.3
          memory: 512Mi
      storage:
        capacity: 10Gi

  ci:
  # -- Enable to install CI
    enabled: true
    ci-manager:
      autoscaling:
        enabled: false
      replicaCount: 1
      java:
        memory: "2048m"
      resources:
        limits:
          cpu: 0.5
          memory: 3000Mi
        requests:
          cpu: 0.5
          memory: 3000Mi

  sto:
    sto-core:
      autoscaling:
        enabled: false
      replicaCount: 1
      resources:
        limits:
          cpu: 500m
          memory: 500Mi
        requests:
          cpu: 500m
          memory: 500Mi
    sto-manager:
      autoscaling:
        enabled: false
      replicaCount: 1
      resources:
        limits:
          cpu: 1
          memory: 3072Mi
        requests:
          cpu: 1
          memory: 3072Mi

  srm:
    enable-receivers: false
    et-service:
      et:
        java:
          heapSize: "2048m"
        redis:
          enabled: false
      autoscaling:
        enabled: false
      replicaCount: 1
      resources:
        limits:
          cpu: 1
          memory: 3Gi
        requests:
          cpu: 100m
          memory: 3Gi
    et-collector:
      et:
        java:
          heapSize: "1600m"
      autoscaling:
        enabled: false
      replicaCount: 1
      resources:
        limits:
          cpu: 500m
          memory: 2Gi
        requests:
          cpu: 100m
          memory: 2Gi

  ngcustomdashboard:
    looker:
      resources:
        limits:
          cpu: 4
          memory: 8Gi
        requests:
          cpu: 2
          memory: 4Gi
      config:
        # -- name of the user who performs setup and support tasks
        firstName: Harness
        # -- last name of the user who performs setup and support tasks
        lastName: Support
        # -- email address of the support user, required for initial signup and support
        email: ''
        # -- id used by initial setup user for authentication, generate a 20-byte key, e.g. openssl rand -hex 10
        clientId: ''
        # -- timescale connection name, must match model connection name
        timescaleConnectionName: 'qa-timescale'
        # -- timescale hostname
        timescaleHost: ''
        # -- timescale port
        timescalePort: ''
        # -- timescale database name
        timescaleDatabase: ''
        # -- timescale user
        timescaleUser: ''
        # -- name of the looker project which will be created
        projectName: 'Harness'

      lookerSecrets:
        licenseKey:
          name: harness-secrets
          # -- name of secret containing the looker license key which will be provided by Harness
          key: lookerLicenseKey
        masterKey:
          name: harness-secrets
          # -- name of secret containing the key used for at rest encryption by looker, generate a Base64, 32-byte key, e.g. openssl rand -base64 32
          key: lookerMasterKey
        clientSecret:
          name: harness-secrets
          # -- name of secret containing the client secret used for initial setup, generate a 24-byte key, e.g. openssl rand -hex 12
          key: lookerClientSecret

      timescaleSecrets:
        password:
          name: harness-secrets
          # -- name of secret containing the timescale password
          key: lookerTimescalePassword

      ingress:
        # -- Required if ingress is enabled, Looker requires a separate DNS domain name to function
        host: ''
        tls:
          secretName: ''
    ng-custom-dashboard:
      resources:
        limits:
            cpu: 1
            memory: 600Mi
        requests:
          cpu: 0.5
          memory: 300Mi
      config:
        # -- scheme used for your looker install, http or https
        lookerScheme: 'https'
        # -- hostname of your looker install
        lookerHost: ''
        # -- port of your looker install
        lookerPort: '80'
        # -- folder ID of the 'CUSTOMER' folder in looker
        customerFolderId: '6'
        # -- folder ID of the 'OOTB' folder in looker
        ootbFolderId: '7'
        # -- hostname of your redis install
        redisHost: ''
        # -- port of your redis install
        redisPort: '6379'
        # -- if you have configured Looker models with a prefix enter it here
        modelPrefix: ''
        # -- looker sdk param
        lookerApiVersion: '4.0'
        # -- looker sdk param
        lookerTimeout: '120'
        # -- looker sdk param
        lookerVerifySsl: 'false'

      lookerSecrets:
        clientId:
          name: harness-secrets
          key: lookerSdkClientId
        clientSecret:
          name: harness-secrets
          key: lookerSdkClientSecret
        secret:
          name: harness-secrets
          key: lookerEmbedSecret
